// import React from 'react'
// import styles from './assignModuleView.module.css'
// import Select2 from '@/components/Form/FormFields/Select/select2'
// import AddModuleForm from '@/components/Form/Forms/AddModuleForm/AddModuleForm'
// import Modal from '@/components/Modal/Modal'
// import { useState } from 'react'
// import { useGetLessons } from '@/services/api/lessons'
// import AssignCard from '@/components/Card/AssignCard/AssignCard'
// import { useSelector } from 'react-redux'
// import { usePathname, useSearchParams } from 'next/navigation'
// import Button from '@/components/Button/Button'
// import { useAddModule } from '@/services/api/module'
// import { userData } from '@/services/redux/features/userSlice'
// import { Controller, SubmitHandler, useFieldArray, useForm } from 'react-hook-form'
// import Select from '../../Form/FormFields/Select/DropDown'
// import { TextInput } from '@/components/Form/FormFields/TextInput/TextInput'
// import { TbTrash } from 'react-icons/tb'
// import { ActionMeta } from 'react-select'
// const AssignModuleView = ({}) => {
//   const teacherData = useSelector(userData).currentTeacher?.data!
//   // const IDs = useSelector((state) => state?.user?.currentTeacher?.data);
//   // const pathname = usePathname();
//   const searchParams = useSearchParams()
//   const classID = searchParams.get('id')
//   const { data: lessonData } = useGetLessons(3)
//   const [addedModule, setAddedModule] = useState([])
//   const [selectedModules, setSelectedModules] = useState<String[]>([''])
//   // const { trigger } = useAddModule();
//   // const [payload, setPayload] = useState({
//   //   school_id: `${IDs?.school?.id}`,
//   //   teacher_id: `${IDs?.teacher_id}`,
//   //   class_id: classID,
//   //   data: [],
//   // });
//   type Inputs = {
//     module: ''
//     data: { deadline: string; attempts: ''; time: ''; mark: '' }[]
//   }

//   const options = lessonData?.map((item) => {
//     return { value: item.title, label: item?.title }
//   })

//   // Handle remove card
//   // const handleRemoveCard = (param:any) => {
//   //   setAddedModule((current) => current.filter((item) => item.id !== param.id));
//   // };

//   // Handle Submit

//   // HANDLE ADD
//   // const handleAdd = (formdata) => {
//   //   const alreadyExisting = addedModule.find(
//   //     (item) => item.id === selectedModule?.id
//   //   );
//   //   if (alreadyExisting) {
//   //     alert("already exist");
//   //   } else {
//   //     const data = { ...payload };
//   //     data["data"].push({
//   //       module: selectedModule.id,
//   //       deadline: formdata?.date,
//   //       time: formdata?.time,
//   //       no_attempt: formdata?.no_attempt,
//   //       mark: formdata?.mark,
//   //     });
//   //     setPayload(data);
//   //     setAddedModule((current) => [...current, selectedModule]);
//   //     setSelectedModule(false);
//   //   }
//   // };
//   const handleChange = (selectedValue: any, actionMeta: any) => {
//     // console.log(selectedValue, actionMeta)
//     if (actionMeta.action === 'select-option') {
//       selectedValue.map((ele: any, index: number) =>
//         setSelectedModules([...selectedModules, ele.value])
//       )
//       append({
//         deadline: '',
//         attempts: '',
//         time: '',
//         mark: '',
//       })
//     } else if (actionMeta.action === 'remove-value') {
//     }
//   }

//   // console.log(selectedModules)
//   let renderCount = 0
//   const { register, handleSubmit, control, reset } = useForm<Inputs>({
//     defaultValues: {
//       data: [{ deadline: '', attempts: '', time: '', mark: '' }],
//     },
//   })
//   const { fields, append, remove } = useFieldArray({
//     control,
//     name: 'data',
//   })
//   const removeModule = (index: number) => {
//     console.log(index)
//     remove(index)
//   }
//   const onSubmit: SubmitHandler<Inputs> = (data) => {}
//   renderCount++

//   return (
//     <>
//       <div>
//         <form className={styles.container} onSubmit={handleSubmit(onSubmit)}>
//           <Controller
//             name="module"
//             control={control}
//             render={({ field }) => (
//               <Select
//                 onChange={handleChange}
//                 label="SELECT MODULE"
//                 defaultValue={'Select'}
//                 options={options}
//               />
//             )}
//           />
//           {selectedModules.length > 1 && (
//             <div className="my-16">
//               <h3 className="text-lg mb-4">
//                 Modules <span className="text-xs">(Complete the selected modules)</span>
//               </h3>
//               <div className="flex gap-4 flex-wrap items-center justify-between">
//                 {fields.map((item, index) => (
//                   <div key={item.id} className={`${index < 1 ? 'hidden' : ''}`}>
//                     {/* {index >= 1 && ( */}
//                       <div className="shadow-lg p-6 w-[22em] relative ">
//                         <p className="my-5 font-bold text-xl">{selectedModules[index]}</p>
                       
//                         <div className="flex justify-between flex-wrap gap-6">
//                           <TextInput
//                             register={{ ...register(`data.${index}.deadline`, { required: true }) }}
//                             label="Deadline"
//                             name={`data.${index}.deadline`}
//                             type="text"
//                             placeholder="Deadline"
//                             style={{ width: '140px' }}
//                           />

//                           <TextInput
//                             register={{ ...register(`data.${index}.attempts`, { required: true }) }}
//                             label="Attempts"
//                             name={`data.${index}.attempts`}
//                             type="number"
//                             placeholder="No of Attempts"
//                             style={{ width: '140px' }}
//                           />
//                           <TextInput
//                             register={{ ...register(`data.${index}.time`, { required: true }) }}
//                             label="Time"
//                             name={`data.${index}.time`}
//                             type="time"
//                             placeholder="Time"
//                             style={{ width: '140px' }}
//                           />
//                           <TextInput
//                             register={{ ...register(`data.${index}.mark`, { required: true }) }}
//                             label="Mark"
//                             name={`data.${index}.mark`}
//                             type="number"
//                             placeholder="Mark"
//                             style={{ width: '140px' }}
//                           />
//                         </div>
                        
//                         <button
//                           type="button"
//                           onClick={() => remove(index)}
//                           className="absolute top-10 right-5"
//                         >
//                           {' '}
//                           {index}
//                           <TbTrash className="text-base" />
//                         </button>
//                       </div>
//                     {/* )} */}
//                   </div>
//                 ))}
//               </div>
//             </div>
//           )}

//           {selectedModules.length > 1 ? (
//             <div className="my-6 text-center">
//               <Button text="Submit" type="submit" />
//             </div>
//           ) : null}
//         </form>
//       </div>

//       {/* <p className={styles.selectModuleTitle}></p> */}
//       {/* <ModulesSection
//           selectModule={selectModule}
//           setselectModule={setselectModule}
//           data={data}
//           isValidating={isValidating}
//         /> */}
//       {/* {addedModule.length > 0 ? (
//           <div className={styles.cardWrap}>
//             {addedModule?.map((item) => (
//               <AssignCard
//                 item={item}
//                 key={item.id}
//                 handleDelete={handleRemoveCard}
//               />
//             ))}
//           </div>
//         ) : null} */}
//     </>
//   )
// }

// export default AssignModuleView
